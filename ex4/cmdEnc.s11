tks = 177560
tkb = 177562
tps = 177564
tpb = 177566

.= torg + 60
.word imgInput, 200

.= torg + 1000
main: mov #main, sp

      mov #nRows, -(sp)
      mov #nCols, -(sp)
      jsr pc, cmdEnc
      cmp (sp)+, (sp)+

      jmp finish

cmdEnc: ; 2(sp) - nCols, 4(sp) - nRows

      mov r5, -(sp)

      mov #encPrmt1, -(sp)
      mov #1, -(sp)
      jsr pc, printText
      cmp (sp)+, (sp)+

      clr r5
      add @4(sp), r5         ; 4(sp) = nCols
      mov r4, -(sp)
      clr r4
      movb @6(sp), r4    ; 6(sp) = nRows
      mul r4, r5
      mov (sp)+, r4

      mov r5, -(sp)        ; dimensions
      mov #IMG3, -(sp)      ; const address
      mov #IMG3, -(sp)      ; dynamic address
      bis #1, tps
      mov #101, tks
loop: wait
      bit #1, tks
      bne loop
      add #6, sp

      mov r5, -(sp)             ; r5=dimenstions
      mov #IMG3, -(sp)          ; img to convert from asci to octal
      jsr pc, asciToOc
      cmp (sp)+, (sp)+

      mov #IMG3, -(sp)
      mov 10(sp), -(sp)            ; 10(sp)=nRows address
      mov 10(sp), -(sp)            ; 10(sp)=nCols address
      mov #Hash, -(sp)
      mov #Key, -(sp)
      jsr pc, encode
      add #12, sp

      mov #encPrmt2, -(sp)
      mov #1, -(sp)
      jsr pc, printText
      cmp (sp)+, (sp)+

      mov #IMG3, -(sp)
      movb @10(sp), -(sp)            ; 10(sp) = nRows
      clr -(sp)
      movb @12(sp), (sp)            ; 12(sp) = nCols
      jsr pc, printImg
      cmp (sp)+, (sp)+
      tst (sp)+

mov (sp)+, r5
rts pc

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

asciToOc:; 2(sp) - #str , 4(sp) - size
      mov r1, -(sp)
      mov r2, -(sp)
      mov r3, -(sp)

      mov 10(sp), r1           ; 10(sp)=#str
      mov 12(sp), r3          ; 12(sp)=length

toOcProcess:
      movb (r1), r2
      mov r2, -(sp)
      bic #777637, r2
      cmp r2, #140            ; is char?
      beq ocChar
ocNum:  mov (sp)+, r2
        bic #777760, r2
        br ocUpdate
ocChar: mov (sp)+, r2
        bic #777770, r2
        add #11, r2

ocUpdate:   movb r2, (r1)+
            dec r3
            beq toOcFinish
            br toOcProcess

toOcFinish: mov (sp)+, r3
            mov (sp)+, r2
            mov (sp)+, r1
            rts pc

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

; receives the following stack:
; return address
; amount of rows
; amount of columns
; Img address
; output:
; prints the image in HEX format

printImg: mov 2(sp), -(sp)
          mov 6(sp), -(sp)
          mov (r1), -(sp)         ;IMG iterator
          mov 14(sp), r1
          bit #1, @#tps
PIstepCol:
          mov #1, -(sp)
          mov r1, -(sp)
          jsr pc, ocToAsci        ;converts the byte into ascii
          cmp (sp)+, (sp)+
PIbusy_wait: tstb @#tps
          bpl PIbusy_wait
          movb (r1), @#tpb        ;prints the byte in the IMG
          mov #1, -(sp)
          mov r1, -(sp)
          jsr pc, asciToOc        ;converts it back to octal
          cmp (sp)+, (sp)+
          inc r1
          dec 2(sp)
          bne PIstepCol
PInewline:tstb @#tps              ;prints newline
          bpl PInewline
          movb #'\n, @#tpb
PInewcrline:
          tstb @#tps
          bpl PInewcrline
          movb #'\r, @#tpb

          mov 12(sp), 2(sp)
          dec 4(sp)               ;continues to the next line
          bne PIstepCol

          tst (sp)+
          cmp (sp)+, (sp)+
          rts pc

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ocToAsci:; 2(sp) - #str , 4(sp) - size
      mov r1, -(sp)
      mov r2, -(sp)
      mov r3, -(sp)

      mov 10(sp), r1           ; 10(sp)=#str
      mov 12(sp), r3          ; 12(sp)=length

toAsciProcess:
          movb (r1), r2
          cmp r2, #12            ; is char?
          bge asciChar
asciNum:  bis #60, r2
          br asciUpdate
asciChar: bis #140, r2
          sub #11, r2

asciUpdate:   movb r2, (r1)+
              dec r3
              beq toAsciFinish
              br toAsciProcess

toAsciFinish: mov (sp)+, r3
            mov (sp)+, r2
            mov (sp)+, r1
            rts pc

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;Output is stored in OrigImg
encode:   ; 2(sp) - key, 4(sp) - hash, 6(sp) - nCols, 10(sp) - nRows, 12(sp) - OrigImg
          ; reveives the stack in the following way:
          ; push OrigImg
          ; push nRows
          ; push nCols
          ; push Hash
          ; push Key
          mov 12(sp), -(sp)         ;store the OrigImg pointer, so we can update it we the work on the current block
          mov r5, -(sp)
          clr r5
          ;Encodes a block, thus encrypting it, mixing and encrypting again.
          ;Makes sure that we stay in the user's dimentions for the image
EncodeBlock:
          mov 2(sp), -(sp)
          mov 10(sp), -(sp)
          mov 16(sp), -(sp)
          jsr pc, EncryptBlock
          tst (sp)+
          tst (sp)+
          tst (sp)+
          mov 2(sp), -(sp)
          mov 12(sp), -(sp)
          mov 16(sp), -(sp)
          jsr pc, MixBlock
          tst (sp)+
          tst (sp)+
          tst (sp)+
          mov 2(sp), -(sp)
          mov 10(sp), -(sp)
          mov 16(sp), -(sp)
          clr r5
          jsr pc, EncryptBlock
          tst (sp)+
          tst (sp)+
          tst (sp)+

          mov r4, -(sp)       ;use r4 as a temp var for mul
          mov r3, -(sp)       ;use r3 as a temp var for mul
          clr r3
          movb @16(sp), r4    ;copy nCols
          mov 16(sp), r3      ;copy nRows
          inc r3
          movb (r3), r3
          mul r4, r3          ;we know the image size is less then 2^16
          mov r3, r4
          add 22(sp), r4      ; 22(sp) is the place where encode got OriImg address
          sub r5, r4          ;if we exceeded the blocks - should be negative
          tst r4
          bmi EMoveBlockRight
          tst r4
          bne EDownMoveBlock
          ;moves to the right block, i.e: moves 4 columns forward
EMoveBlockRight:
          sub r3, r5          ;initialize the OrigImg pointer to the first line in the column.
          mov r5, 6(sp)       ;basically we substract the multiplication of nColsxnRows from the current
                              ;place in the image's pointer (stored in 2(sp))
          add #4, 6(sp)       ;move to next block from right
          mov 6(sp), r4
          clr r3
          movb @16(sp), r3    ;copy nCols value to r3
          sub r3, r4
          mov 22(sp), r3
          sub r4, r3
          beq EEndEncodeR     ;if the result=0, we exceeded nCols

          mov (sp)+, r3
          mov (sp)+, r4
          br EncodeBlock
          ; moves to the next block which is down. i.e: adds 4 rows
EDownMoveBlock:
          mov (sp)+, r3
          mov (sp)+, r4
          mov r5, 2(sp)
          br EncodeBlock
          br DendEncode
          ; if we finished encoding the image.
EEndEncodeR:
          mov (sp)+, r3
          mov (sp)+, r4
DendEncode:
          mov (sp)+, r5
          tst (sp)+           ;pull the r5 we pushed earlier to return r1's value from the encription
          rts pc

          ;The encryption itself. uses xor for encrypting Key's value and Img's byte value.
EncryptBlock:  ; 14(sp) - nCols address, 16(sp) - Key address, 20(sp) - OImg address
               ; Order of passing parameters:
               ; push Image address
               ; push Key address
               ; push nCols address
          mov r1, -(sp)
          mov r2, -(sp)
          mov r4, -(sp)
          mov r5, -(sp)
          mov r3, -(sp)
          clr r4
          mov 20(sp), r1
          mov 16(sp), r2
          mov @14(sp), r4
          bic #177400, r4                 ;gets lower byte of r4, which is nCols
          mov #4, r5                      ;set counters for sob
          mov #4, r3
          ;encrypts line-line (row) in the block
LineEncrypt:
          mov r2,-(sp)                    ;store current node and put it's value in r2
          mov (r2),r2
          mov r1,-(sp)                    ;because r1 is byte, we store r1's address and move into it the value for xoring
          clr r1
          movb @0(sp), r1
          xor r2,r1
          movb r1, @0(sp)
          mov (sp)+, r1
          inc r1
          mov (sp)+, r2
          add #2, r2                       ;moves to next node in key
          cmp @(r2), #177777
          beq EGetNewKey                    ;cycles again the key if nil
          tst(r2)
          bne EKeyIsOk
          ; if key was null, or -1, we rotate the key the start.
EGetNewKey:
          mov 16(sp), r2
          sob r5, LineEncrypt
          br ENextLine
EKeyIsOk: mov (r2), r2                    ;get address of new key node
          sob r5, LineEncrypt
          ;continue to the next row in the block
ENextLine: sub #4, r1                       ;mov r1 to the beginning of line
          add r4, r1                      ;moves r4 one line forward
          mov #4, r5
          sob r3, LineEncrypt
          mov (sp)+, r3
          mov (sp)+, r5
          mov r1, r5
          mov (sp)+, r4
          mov (sp)+, r2
          mov (sp)+, r1
          rts pc

MixBlock: ; 14(sp) - nCols address, 16(sp) - Hash address, 20(sp) - OImg address
           ; Order of passing parameters:
           ; push Image address
           ; push Hash address
           ; push nCols address
          mov r1, -(sp)
          mov r2, -(sp)
          mov r4, -(sp)
          mov r5, -(sp)
          mov r3, -(sp)
          clr r4
          mov 20(sp), r1
          mov 16(sp), r2
          mov @14(sp), r4
          bic #177400, r4
          mov #4, r5
          mov #4, r3
          mov #4, -(sp)       ; counter for cyclic move
          ;mixes the block. first uses the Hash function, then moves the rows in a cyclic procedure.
MixLine:
          mov r2, -(sp)
          mov r1, -(sp)       ; stores r1-index to img, r2-index to hash

          movb (r1), r1       ;get the value in image to use as index in Hash
          add r1, r2          ;advance r2 to desired index
          mov (sp)+, r1
          movb (r2), r2
          movb r2, (r1)+
          mov (sp)+, r2
          sob r3, MixLine
          sub #4, r1          ; initialize r1 to points to the first element in line

          mov r5,(sp)
          sub #4, (sp)        ;checks if cyclic move needs to be taken and how many moves should be done
          neg (sp)
          tst (sp)
          beq MNextLine
          mov r5, -(sp)       ;use r5 as counter for cyclic moves
          mov r3, -(sp)       ;use r3 as a temp register
          ; Cyclic operation
ERepCyclicOp:
          clr r3
          mov #3, r5
          add #3, r1          ;r1 should point to the last element in line
          movb (r1), r3

ECyclicOpLine:   dec r1              ;move the value of (r1) to the next byte
          movb (r1), 1(r1)
          dec r5
          bne ECyclicOpLine          ;if finished the cyclic move, continue
          movb r3, (r1)
          dec 4(sp)
          bne ERepCyclicOp        ;if finished cyclic operation on the line, continue
          mov (sp)+, r3
          mov (sp)+, r5
MNextLine:
          add r4, r1
          mov #4, r3
          sob r5, MixLine
          tst (sp)+
          mov (sp)+, r3
          mov (sp)+, r5
          mov (sp)+, r4
          mov (sp)+, r2
          mov (sp)+, r1
          rts pc

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

; recevies num of args to print, then the string addresses
; Stack:
; - return address
; - num of args
; - addresses

printText:  mov r0, -(sp)
            tst -(sp)      ; index for current string to print in the stack
            mov r1,-(sp)      ; string iterator
            mov #12, 2(sp)   ; advance the index to the first string
            mov 10(sp), r0  ; r0 = num of args
PTprintString:
            clr r1
            add 2(sp), r1
            add #2, 2(sp)     ; point to next string
            add sp, r1        ; r1 will point to the current string to print in the stack

PTprintLoop:  tstb @#tps
            bpl PTprintLoop
            cmpb @(r1), #'&
            beq PTstringEnd
            movb @(r1), @#tpb
            inc (r1)
            br PTprintLoop

PTstringEnd:  sob r0, PTprintString

            mov (sp)+, r1
            tst (sp)+
            mov (sp)+, r0
            rts pc

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

imgInput: ; 4(sp) - dynamic Img address, 6(sp) - const Img address, 10(sp) - dimensions
      mov r1, -(sp)
      mov r2, -(sp)

      clr r1
      movb tkb, r1

              cmp r1, #'\b
              bne imgInpEnter
              movb #0, @10(sp)       ; 10(sp)=Img's Address
              dec 10(sp)
              br imgInpPrint

imgInpEnter:  cmp r1, #'\r        ; is Enter?
              bne imgInpChar
              mov 10(sp), r2         ; 10(sp)=dynamic Img address
              sub 14(sp), r2        ; 14(sp)=dimensions
              cmp r2, 12(sp)        ; 12(sp)=const Img address
              bhis imgIpEnd
imgPrintLF:   bit #200, tps
              beq imgPrintLF
              mov #'\n, tpb
              br imgInpPrint

imgInpChar:   cmp r1, #141
              blo imgInpNum
              cmp r1, #146
              bhi imgInpNum
              br imgInpUpdate

imgInpNum:    cmp r1, #60
              blo imgInpPrint
              cmp r1, #71
              bhi imgInpPrint
              br imgInpUpdate

imgInpUpdate: movb r1, @10(sp)     ; 10(sp)=Img's address
              inc 10(sp)
              br imgInpPrint

imgIpBS1:     mov #40, r1         ; 40=" "
              bit #200, tps
              beq imgIpBS1
              mov r1, tpb
imgIpBS2:     mov #'\b, r1
              bit #200, tps
              beq imgIpBS2
              mov r1, tpb
              br imgInpFinish
imgInpPrint:  bit #200, tps
              beq imgInpPrint
              mov r1, tpb
              cmp r1, #'\b
              bne imgInpFinish
              br imgIpBS1

imgInpFinish: inc tks
imgIpEnd:     mov (sp)+, r2
              mov (sp)+, r1
              rti

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

finish: halt
.even
nCols: .byte 4
nRows: .byte 4
.even
encPrmt1: .ascii<Please enter image to encode\n\r&>
encPrmt2: .ascii<\n\rThe encoded image is:\n\r&>
Hash:  .byte  17,16,15,14,13,12,11,10,7,6,5,4,3,2,1,0
.even
Key:
  node4:  .word 3, node5
  node5:  .word 0, node6
  node6:  .word -1, 0
.even
IMG3: .blkw 1000
