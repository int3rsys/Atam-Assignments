Technion Computer Science Department -- PDP/11 X-Assembler Version (5.5) AA.


	S O U R C E    F I L E    :    C:\Users\Ilya\Desktop\ATAM-HW2\Git\ex3\dec.s11
	=============================================================================

000000                             1     . = torg + 1000
001000   010706                    2     main:	mov	pc,	sp
001002   005746                    3               tst	-(sp)
001004   012746 005042             4               mov #EncImg, -(sp)
001010   012746 005001             5               mov #nRows, -(sp)
001014   012746 005000             6               mov #nCols, -(sp)
001020   012746 005102             7               mov #Hash, -(sp)
001024   012746 005122             8               mov #Key, -(sp)
001030   004767 000012             9               jsr pc, decode
001034   005726                   10               tst (sp)+
001036   005726                   11               tst (sp)+
001040   005726                   12               tst (sp)+
001042   005726                   13               tst (sp)+
001044   005726                   14               tst (sp)+
001046                            15     decode:   ; 2(sp) - key, 4(sp) - hash, 6(sp) - nCols, 10(sp) - nRows, 12(sp) - OrigImg
                                  16               ; reveives the stack in the following way:
                                  17               ; push OrigImg
                                  18               ; push nRows
                                  19               ; push nCols
                                  20               ; push Hash
                                  21               ; push Key
001046   016646 000012            22               mov 12(sp), -(sp)         ;store the EncImg pointer, so we can update it we the work on the current block
001052   010546                   23               mov r5, -(sp)
001054   005005                   24               clr r5
001056   016646 000002            25     decBlock: mov 2(sp), -(sp)
001062   016646 000010            26               mov 10(sp), -(sp)
001066   016646 000016            27               mov 16(sp), -(sp)
001072   004767 000224            28               jsr pc, decryptBlock
001076   005726                   29               tst (sp)+
001100   005726                   30               tst (sp)+
001102   005726                   31               tst (sp)+
001104   016646 000002            32               mov 2(sp), -(sp)
001110   016646 000012            33               mov 12(sp), -(sp)
001114   016646 000016            34               mov 16(sp), -(sp)
001120   004767 000360            35               jsr pc, unmixBlock
001124   005726                   36               tst (sp)+
001126   005726                   37               tst (sp)+
001130   005726                   38               tst (sp)+
001132   016646 000002            39               mov 2(sp), -(sp)
001136   016646 000010            40               mov 10(sp), -(sp)
001142   016646 000016            41               mov 16(sp), -(sp)
001146   005005                   42               clr r5
001150   004767 000146            43               jsr pc, decryptBlock
001154   005726                   44               tst (sp)+
001156   005726                   45               tst (sp)+
001160   005726                   46               tst (sp)+
                                  47     
001162   010446                   48               mov r4, -(sp)       ;use r4 as a temp var for mul
001164   010346                   49               mov r3, -(sp)       ;use r3 as a temp var for mul
001166   005003                   50               clr r3
001170   117604 000016            51               movb @16(sp), r4    ;copy nCols
001174   016603 000016            52               mov 16(sp), r3      ;copy nRows
001200   005203                   53               inc r3
001202   111303                   54               movb (r3), r3
001204   070304                   55               mul r4, r3          ;we know the image size is less then 2^16
001206   010304                   56               mov r3, r4
001210   066604 000022            57               add 22(sp), r4      ; 22(sp) is the place where encode got OriImg address
001214   160504                   58               sub r5, r4          ;if we exceeded the blocks - should be negative
001216   005704                   59               tst r4
001220   100433                   60               bmi endEncodeR
001222   005704                   61               tst r4
001224   001023                   62               bne downMoveBlock
001226                            63     moveBlockRight:
001226   160305                   64               sub r3, r5          ;initialize the OrigImg pointer to the first line in the column.
001230   010566 000006            65               mov r5, 6(sp)       ;basically we substract the multiplication of nColsxnRows from the current
                                  66                                   ;place in the image's pointer (stored in 2(sp))
001234   062766 000004 000006     67               add #4, 6(sp)       ;move to next block from right
001242   016604 000006            68               mov 6(sp), r4
001246   005003                   69               clr r3
001250   117603 000016            70               movb @16(sp), r3    ;copy nCols value to r3
001254   160304                   71               sub r3, r4
001256   016603 000022            72               mov 22(sp), r3
001262   160403                   73               sub r4, r3
001264   001411                   74               beq endEncodeR     ;if the result=0, we exceeded nCols
                                  75     
001266   012603                   76               mov (sp)+, r3
001270   012604                   77               mov (sp)+, r4
001272   000671                   78               br decBlock
001274                            79     downMoveBlock:
001274   012603                   80               mov (sp)+, r3
001276   012604                   81               mov (sp)+, r4
001300   010566 000002            82               mov r5, 2(sp)
001304   000664                   83               br decBlock
001306   000402                   84               br DendEncode
001310                            85     endEncodeR:
001310   012603                   86               mov (sp)+, r3
001312   012604                   87               mov (sp)+, r4
001314                            88     DendEncode:
001314   012605                   89               mov (sp)+, r5
001316   005726                   90               tst (sp)+           ;pull the r5 we pushed earlier to return r1's value from the encription
001320   000207                   91               rts pc
                                  92               ;call to mix
                                  93               ;call to encryption
                                  94               ;loop with check bounderies
                                  95     
001322                            96     decryptBlock:  ; 14(sp) - nCols address, 16(sp) - Key address, 20(sp) - OImg address
                                  97                    ; Order of passing parameters:
                                  98                    ; push Image address
                                  99                    ; push Key address
                                 100                    ; push nCols address
001322   010146                  101               mov r1, -(sp)
001324   010246                  102               mov r2, -(sp)
001326   010446                  103               mov r4, -(sp)
001330   010546                  104               mov r5, -(sp)
001332   010346                  105               mov r3, -(sp)
001334   005004                  106               clr r4
001336   016601 000020           107               mov 20(sp), r1
001342   016602 000016           108               mov 16(sp), r2
001346   017604 000014           109               mov @14(sp), r4
001352   042704 177400           110               bic #177400, r4                 ;gets lower byte of r4, which is nCols
001356   012705 000004           111               mov #4, r5                      ;set counters for sob
001362   012703 000004           112               mov #4, r3
001366                           113     decryptLine:
001366   010246                  114               mov r2,-(sp)                    ;store current node and put it's value in r2
001370   011202                  115               mov (r2),r2
001372   010146                  116               mov r1,-(sp)                    ;because r1 is byte, we store r1's address and move into it the value for xoring
001374   005001                  117               clr r1
001376   117601 000000           118               movb @0(sp), r1
001402   074201                  119               xor r2,r1
001404   110176 000000           120               movb r1, @0(sp)
001410   012601                  121               mov (sp)+, r1
001412   005201                  122               inc r1
001414   012602                  123               mov (sp)+, r2
001416   062702 000002           124               add #2, r2                       ;moves to next node in key
001422   027227 000000 177777    125               cmp @(r2), #177777
001430   001402                  126               beq getNewKey                    ;cycles again the key if nil
001432   005712                  127               tst(r2)
001434   001004                  128               bne keyLenOK
001436                           129     getNewKey:
001436   016602 000016           130               mov 16(sp), r2
001442   077527                  131               sob r5, decryptLine
001444   000402                  132               br nextLine
001446   011202                  133     keyLenOK: mov (r2), r2                    ;get address of new key node
001450   077532                  134               sob r5, decryptLine
001452   162701 000004           135     nextLine: sub #4, r1                       ;mov r1 to the beginning of line
001456   060401                  136               add r4, r1                      ;moves r4 one line forward
001460   012705 000004           137               mov #4, r5
001464   077340                  138               sob r3, decryptLine
001466   012603                  139               mov (sp)+, r3
001470   012605                  140               mov (sp)+, r5
001472   010105                  141               mov r1, r5
001474   012604                  142               mov (sp)+, r4
001476   012602                  143               mov (sp)+, r2
001500   012601                  144               mov (sp)+, r1
001502   000207                  145               rts pc
                                 146     
001504                           147     unmixBlock: ; 14(sp) - nCols address, 16(sp) - Hash address, 20(sp) - OImg address
                                 148                ; Order of passing parameters:
                                 149                ; push Image address
                                 150                ; push Hash address
                                 151                ; push nCols address
001504   010146                  152               mov r1, -(sp)
001506   010246                  153               mov r2, -(sp)
001510   010446                  154               mov r4, -(sp)
001512   010546                  155               mov r5, -(sp)
001514   010346                  156               mov r3, -(sp)
001516   005004                  157               clr r4
001520   016601 000020           158               mov 20(sp), r1
001524   016602 000016           159               mov 16(sp), r2
001530   017604 000014           160               mov @14(sp), r4
001534   042704 177400           161               bic #177400, r4
001540   012705 000004           162               mov #4, r5
001544   012703 000004           163               mov #4, r3
001550   012746 000004           164               mov #4, -(sp)       ; counter for cyclic move
                                 165     
001554                           166     unmixLine:
001554   010246                  167               mov r2, -(sp)
001556   010146                  168               mov r1, -(sp)       ; stores r1-index to img, r2-index to hash
001560   010346                  169               mov r3, -(sp)       ;temp iterator for Hash array
001562   005003                  170               clr r3
001564   111101                  171               movb (r1), r1
001566                           172     calcIndex:                     ;goes over Hash values until it matches (r1)
001566   120122                  173               cmpb r1, (r2)+
001570   001402                  174               beq indexFound
001572   005203                  175               inc r3
001574   000774                  176               br calcIndex
001576                           177     indexFound:
001576   110361 000002           178               movb r3, 2(r1)
001602   005266 000002           179               inc 2(sp)
001606   012603                  180               mov (sp)+, r3
001610   012601                  181               mov (sp)+, r1
001612   012602                  182               mov (sp)+, r2
001614   077321                  183               sob r3, unmixLine
001616   162701 000004           184               sub #4, r1          ; initialize r1 to points to the first element in line
                                 185     
001622   010516                  186               mov r5,(sp)         ;r5 = 4 in the beginning
001624   162716 000004           187               sub #4, (sp)        ;checks if cyclic move needs to be taken and how many moves should be done
001630   005416                  188               neg (sp)
001632   005716                  189               tst (sp)
001634   001421                  190               beq nextRow
001636   010546                  191               mov r5, -(sp)       ;use r5 as counter for cyclic moves
001640   010346                  192               mov r3, -(sp)       ;use r3 as a temp register
001642                           193     cycleRep:
001642   005003                  194               clr r3
001644   012705 000003           195               mov #3, r5
001650   111103                  196               movb (r1), r3
                                 197     
001652   005201                  198     cycleL:   inc r1              ;move the value of (r1) to the next byte
001654   111161 177777           199               movb (r1), -1(r1)
001660   005305                  200               dec r5
001662   001373                  201               bne cycleL          ;if finished the cyclic move, continue
001664   110311                  202               movb r3, (r1)
001666   005366 000004           203               dec 4(sp)
001672   001363                  204               bne cycleRep        ;if finished cyclic operation on the line, continue
001674   012603                  205               mov (sp)+, r3
001676   012605                  206               mov (sp)+, r5
001700                           207     nextRow:
001700   060401                  208               add r4, r1
001702   012703 000004           209               mov #4, r3
001706   077556                  210               sob r5, unmixLine
001710   005726                  211               tst (sp)+
001712   012603                  212               mov (sp)+, r3
001714   012605                  213               mov (sp)+, r5
001716   012604                  214               mov (sp)+, r4
001720   012602                  215               mov (sp)+, r2
001722   012601                  216               mov (sp)+, r1
001724   000207                  217               rts pc
                                 218     
                                 219     
001726   000000                  220     halt
                                 221     
                                 222     
                                 223     
001730                           224     . = torg + 5000
005000      010                  225     nCols: .byte 10
005001      004                  226     nRows: .byte 4
005002      001    002    001    227     OrigImg: .byte 1, 2, 1, 2, 0, 1, 2, 3
            002    000    001            
            002    003                   
005012      003    004    003    228     .byte 3, 4, 3, 4, 4, 5, 6, 7
            004    004    005            
            006    007                   
005022      005    006    005    229     .byte 5, 6, 5, 6, 10, 11, 12, 13
            006    010    011            
            012    013                   
005032      007    000    007    230     .byte 7, 0, 7, 0, 14, 15, 16, 17
            000    014    015            
            016    017                   
                                 231     
005042      003    004    003    232     EncImg: .byte 3, 4, 3, 4, 2, 3, 4, 5
            004    002    003            
            004    005                   
005052      007    004    007    233     .byte 7, 4, 7, 4, 10, 7, 6, 11
            004    010    007            
            006    011                   
005062      007    010    007    234     .byte 7, 10, 7, 10, 14, 15, 12, 13
            010    014    015            
            012    013                   
005072      003    010    003    235     .byte 3, 10, 3, 10, 16, 1, 0, 17
            010    016    001            
            000    017                   
                                 236     
005102      002    003    004    237     Hash: .byte 2,3,4,5,6,7,10,11,12,13,14,15,16,17,0,1
            005    006    007            
            010    011    012            
            013    014    015            
            016    017    000            
            001                          
005122                           238     Key:
005122   000001 005126           239     node1:  .word 1,node2
005126   000000 005132           240     node2:  .word 0,node3
005132   177777 000000           241     node3:  .word -1,0


	S Y M B O L   T A B L E
	=======================

SYMBOL    VALUE   TYPE
------    -----   ----
main      001000  text     
EncImg    005042  text     
nRows     005001  text     
nCols     005000  text     
Hash      005102  text     
Key       005122  text     
decode    001046  text     
decBlock  001056  text     
decryptB  001322  text     
unmixBlo  001504  text     
endEncod  001310  text     
downMove  001274  text     
moveBloc  001226  text     
DendEnco  001314  text     
decryptL  001366  text     
getNewKe  001436  text     
keyLenOK  001446  text     
nextLine  001452  text     
unmixLin  001554  text     
calcInde  001566  text     
indexFou  001576  text     
nextRow   001700  text     
cycleRep  001642  text     
cycleL    001652  text     
OrigImg   005002  text     
node1     005122  text     
node2     005126  text     
node3     005132  text     
