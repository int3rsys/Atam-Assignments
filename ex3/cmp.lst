Technion Computer Science Department -- PDP/11 X-Assembler Version (5.5) AA.


	S O U R C E    F I L E    :    D:\workspace\Atom\234118\ex3\cmp.s11
	===================================================================

000000                             1     . = torg + 1000
001000   012706 001000             2     main:   mov #main, sp
                                   3     
001004   005746                    4             tst -(sp)
001006   012746 011002             5             mov #OrigImg, -(sp)
001012   012746 011042             6             mov #EncImg, -(sp)
001016   012746 011001             7             mov #nRows, -(sp)
001022   012746 011000             8             mov #nCols, -(sp)
                                   9     
001026   004767 000010            10             jsr pc, cmpImg
                                  11     
001032   062706 000010            12             add #10, sp
001036   000167 000112            13             jmp finish
                                  14     
001042                            15     cmpImg: ; 2(sp)=OUTPUT , 4(sp)=nCols , 6(sp)=nRows , 10(sp)=Img2, 12(sp)=Img1
                                  16     
001042   010146                   17                   mov r1, -(sp)
001044   010246                   18                   mov r2, -(sp)
001046   010346                   19                   mov r3, -(sp)
001050   010446                   20                   mov r4, -(sp)
                                  21     
001052   016601 000020            22                   mov 20(sp), r1       ; Img1
001056   016602 000016            23                   mov 16(sp), r2        ; Img2
                                  24     
001062   121112                   25     cmpByte:      cmpb (r1), (r2)
001064   001016                   26                   bne cmpFalse            ; if [(r1) == (r2)]
                                  27     
001066   005003                   28                   clr r3
001070   117603 000012            29                   movb @12(sp), r3
001074   117604 000014            30                   movb @14(sp), r4
001100   070304                   31                   mul r4, r3         ; r3=nCols*nRows
                                  32     
001102   066603 000020            33                   add 20(sp), r3      ; 20(sp)=Img1
001106   005303                   34                   dec r3
001110   020301                   35                   cmp r3, r1
001112   003407                   36                   ble cmpTrue         ; if r1 reached the end of Img
                                  37     
001114   005201                   38                   inc r1
001116   005202                   39                   inc r2
001120   000760                   40                   br cmpByte
                                  41     
001122   012766 000001 000022     42     cmpFalse:     mov #1, 22(sp)
001130   000404                   43                   br cmpFinish
                                  44     
001132   012766 000000 000022     45     cmpTrue:      mov #0, 22(sp)
001140   000400                   46                   br cmpFinish
                                  47     
001142   012604                   48     cmpFinish:    mov (sp)+, r4
001144   012603                   49                   mov (sp)+, r3
001146   012602                   50                   mov (sp)+, r2
001150   012601                   51                   mov (sp)+, r1
001152   000207                   52                   rts pc
                                  53     
001154   000000                   54     finish: halt
001156                            55     .= torg + 11000
011000      010                   56     nCols: 		.byte 10
011001      004                   57     nRows: 	.byte 4
011002      001    002    001     58     OrigImg: 	.byte	 1,  2,  1,  2, 0,   1,   2,    3
            002    000    001            
            002    003                   
011012      003    004    003     59     				.byte	 3,  4,  3,  4, 4,   5,   6,    7
            004    004    005            
            006    007                   
011022      005    006    005     60     				.byte	 5,  6,  5,  6, 10, 11, 12, 13
            006    010    011            
            012    013                   
011032      007    000    007     61     				.byte	 7,  0,  7,  0, 14, 15, 16, 17
            000    014    015            
            016    017                   
011042      001    002    001     62             EncImg: 	.byte	 1,  2,  1,  2, 0,   1,   2,    3
            002    000    001            
            002    003                   
011052      003    004    003     63             				.byte	 3,  4,  3,  4, 5,   5,   6,    7
            004    005    005            
            006    007                   
011062      005    006    005     64             				.byte	 5,  6,  5,  6, 10, 11, 12, 13
            006    010    011            
            012    013                   
011072      007    000    007     65             				.byte	 7,  0,  7,  0, 14, 15, 16, 17
            000    014    015            
            016    017                   
                                  66     ;EncImg: 	.byte	 3,  4,  3,  4,  2,  3,   4,    5
                                  67     ;				.byte	 7,  4,  7,  4,  10,   7,   6,    11
                                  68     ;				.byte	 7,  10,  7,  10, 14, 15, 12, 13
                                  69     	;			.byte	 3,  10,  3,  10, 16, 1, 0, 17
011102      002    003    004     70     Hash:		.byte 	2,3,4,5,6,7,10,11,12,13,14,15,16,17,0,1
            005    006    007            
            010    011    012            
            013    014    015            
            016    017    000            
            001                          
011122                            71     .even
011122                            72     Key:
011122   177777 011126            73     node1:		.word -1, node2
011126   177777 011132            74     node2:		.word -1, node3
011132   177777 000000            75     node3:		.word -1, 0
011136                            76     ExpKey:
011136   000000 011142            77     _node1:		.word  0, _node2
011142   000001 011146            78     _node2:		.word  1, _node3
011146   000002 000000            79     _node3:		.word  2, 0


	S Y M B O L   T A B L E
	=======================

SYMBOL    VALUE   TYPE
------    -----   ----
main      001000  text     
OrigImg   011002  text     
EncImg    011042  text     
nRows     011001  text     
nCols     011000  text     
cmpImg    001042  text     
finish    001154  text     
cmpByte   001062  text     
cmpFalse  001122  text     
cmpTrue   001132  text     
cmpFinis  001142  text     
Hash      011102  text     
Key       011122  text     
node1     011122  text     
node2     011126  text     
node3     011132  text     
ExpKey    011136  text     
_node1    011136  text     
_node2    011142  text     
_node3    011146  text     
