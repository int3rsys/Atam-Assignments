Technion Computer Science Department -- PDP/11 X-Assembler Version (5.5) AA.


	S O U R C E    F I L E    :    C:\Users\Ilya\Desktop\ATAM-HW2\Git\ex2\hw3tst.s11
	================================================================================

000000                             1     . = torg + 1000
001000   012701 005003             2     main:			mov #Img, r1					;set r1 as pointer to Img's beginning
001004   012702 005043             3     					mov #Hash, r2					;set r2 as pointer to Hash's beginnig
001010   012704 005064             4     					mov #Output, r4				;set r4 as pointer to Output's beginning
                                   5     
001014   005003                    6     					clr r3								;calculate nCols x nRows and store in r3
001016   005067 000760             7     					clr Temp							; --""--
001022   116703 003752             8     					movb nCols, r3				; --""--
001026   116767 003747 000746      9     					movb nRows, Temp			; --""--
001034   005767 000742            10     					tst Temp
001040   001406                   11     					beq endp
001042   005703                   12     					tst r3
001044   001404                   13     					beq endp
001046   070367 000730            14     					mul Temp, r3					; --""--
001052   000167 000004            15     					jmp dupLoop
                                  16     
001056   000167 000714            17     endp:			jmp finish
                                  18     
001062   112124                   19     dupLoop:	movb (r1)+,(r4)+ 			; duplicate Img into Output label
001064   077302                   20     					sob r3, dupLoop				; --""--
                                  21     
001066   012701 005064            22     					mov #Output, r1				; initialize r1
                                  23     
001072   126727 003704 000001     24     					cmpb Enc, #1
001100   001402                   25     					beq ENCRYPT						;if Enc==1, jump to encrypt label
001102   000167 000334            26     					jmp DECRYPT						;else jump to decrypt label
                                  27     
001106                            28     ENCRYPT:
                                  29     
001106   005067 000670            30     EncLine:	clr Temp
001112   111167 000664            31     					movb (r1), Temp				;add value stored by pointer r1 (points to Img array) to r2
001116   066702 000660            32     					add Temp, r2					; --""--
001122   111221                   33     					movb (r2),(r1)+				; --""-- and moves to next byte in the line
001124   012702 005043            34     					mov #Hash,r2					; --""--
                                  35     
001130   005367 000650            36     					dec InLineL
001134   001364                   37     					bne EncLine 					;using first nested loop for each byte in block's line, encrypting it by Hash function
001136   162701 000004            38     					sub #4,r1							;initialize r1 to the first element in a block's line
                                  39     
001142   016767 000640 000630     40     					mov RowLoop, InLineCyclic		;Initialize cyclic counter
001150   162767 000004 000622     41     					sub #4,InLineCyclic					; --""--
001156   005467 000616            42     					neg InLineCyclic						; --""--
                                  43     
001162   005767 000612            44     					tst InLineCyclic
001166   001424                   45     					beq EndDntCycl					;if inline cyclic == 0, pass
                                  46     
001170   012767 000003 000606     47     EncRepCycl:	mov #3, InLineL				;initialize InLineL for cyclMov loop
001176   062701 000003            48     					add #3,r1							;initialize r1 to point to the last element in a block's line
                                  49     
001202   005067 000574            50     					clr Temp							;Initialize temp and place in it the last element in the line
001206   111167 000570            51     					movb (r1), Temp				; --""--
                                  52     
001212   005301                   53     EncCyclMov:	dec r1								;move the value of (r1) to the next byte
001214   111161 000001            54     					movb (r1),1(r1)				; --""--
001220   005367 000560            55     					dec InLineL
001224   001372                   56     					bne EncCyclMov						;if finished one cyclic move, continue
001226   116711 000550            57     					movb Temp, (r1)				;restore the last element, last part of the cyclic move
001232   005367 000542            58     					dec InLineCyclic
001236   001354                   59     					bne EncRepCycl						;if finished cyclic operation on the line, continue
                                  60     
001240   005067 000536            61     EndDntCycl:	clr Temp							;moves r1 to point to a beginning of the next line in a block
001244   116767 003530 000530     62     					movb nCols, Temp			; --""--
001252   066701 000524            63     					add Temp, r1					; --""--
                                  64     
001256   012767 000004 000520     65     					mov #4, InLineL				;initialize InLineL for first nested loop
001264   005367 000516            66     					dec RowLoop
001270   001306                   67     					bne EncLine						;using second nested loop for each line in Img's block, Encrypting it by cyclic move
                                  68     
001272   005004                   69     					clr r4
001274   010105                   70     					mov r1, r5						; calculates if the program encrypted all blocks in a single column
001276   162705 005064            71     					sub #Output, r5				; --""--
001302   005067 000474            72     					clr Temp							; --""--
001306   116767 003466 000466     73     					movb nCols, Temp			; --""--
001314   071467 000462            74     					div Temp, r4					; --""--
001320   005067 000456            75     					clr Temp							; --""--
001324   116767 003451 000450     76     					movb nRows, Temp			; --""--
001332   012767 000004 000446     77     					mov #4, RowLoop				; --""-- + initialize loop itrations over lines in a block
001340   020467 000436            78     					cmp r4, Temp					; --""--
001344   103660                   79     					blo EncLine						; --""--
                                  80     
001346   005067 000430            81     					clr Temp							; calculates nRows x nCols and stores it in r3
001352   116767 003422 000422     82     					movb nCols, Temp			; --""--
001360   016703 000416            83     					mov Temp, r3					; --""--
001364   005067 000412            84     					clr Temp							; --""--
001370   116767 003405 000404     85     					movb nRows, Temp			; --""--
001376   070367 000400            86     					mul Temp, r3					; --""--
                                  87     
001402   160301                   88     					sub r3, r1						; update r1 to the next block's column
001404   062701 000004            89     					add #4, r1						; --""--
                                  90     
001410   010104                   91     					mov r1, r4						; if (((r1-Output)>=nCols)) continue
001412   162704 005064            92     					sub #Output, r4				; --""--
001416   005067 000360            93     					clr Temp							; --""--
001422   116767 003352 000352     94     					movb nCols, Temp			; --""--
001430   020467 000346            95     					cmp r4, Temp					; --""--
001434   002624                   96     					blt EncLine						; --""--
                                  97     
001436   000167 000334            98     jmp finish
                                  99     
001442                           100     DECRYPT:
                                 101     
001442   012767 177777 000332    102     DecLine:		mov #-1, Temp					;initialize Temp as counter in Hash
001450   005267 000326           103     DecByte:		inc Temp							;find the corresponding index for value in
                                 104     																;Hash that is equal to value in Img
001454   121122                  105     						cmpb (r1), (r2)+			; --""--
001456   001374                  106     						bne DecByte						; --""--
                                 107     
001460   012702 005043           108     						mov #Hash, r2					;initialize r2 to pointer to Hash
001464   116721 000312           109     						movb Temp, (r1)+			;decrypt byte
001470   005367 000310           110     						dec InLineL
001474   001362                  111     						bne DecLine
001476   162701 000004           112     						sub #4,r1							;initialize r1 to the start of a block's line
                                 113     
001502   016767 000300 000270    114     						mov RowLoop, InLineCyclic		;Initialize cyclic counter
001510   162767 000004 000262    115     						sub #4,InLineCyclic					; --""--
001516   005467 000256           116     						neg InLineCyclic						; --""--
                                 117     
001522   005767 000252           118     						tst InLineCyclic
001526   001424                  119     						beq DecDntCycl							;if Cyclic counter != 0 then don't cycle
                                 120     
001530   012767 000003 000246    121     DecRepCycl:	mov #3, InLineL							;initialize InLineL for cyclic move loop
                                 122     
001536   005067 000240           123     						clr Temp										;stores the first byte in a block's line
001542   111167 000234           124     						movb (r1), Temp							; --""--
                                 125     
001546   005201                  126     DecCyclMov:	inc r1
001550   111161 177777           127     						movb (r1),-1(r1)						;mov value in next byte to the previous byte
001554   005367 000224           128     						dec InLineL									; --""--
001560   001372                  129     						bne DecCyclMov							;if finished cycle move for line, continue
001562   116711 000214           130     						movb Temp, (r1)							;restore the value stored in Temp
001566   162701 000003           131     						sub #3, r1									;initialize r1
001572   005367 000202           132     						dec InLineCyclic
001576   001354                  133     						bne DecRepCycl							;repeat cyclic move in block
                                 134     
001600   005067 000176           135     DecDntCycl:	clr Temp										;move to the next block's line
001604   116767 003170 000170    136     						movb nCols, Temp						; --""--
001612   066701 000164           137     						add Temp, r1								; --""--
                                 138     
001616   012767 000004 000160    139     						mov #4, InLineL							;initialize InLineL for DecLine loop
001624   005367 000156           140     						dec RowLoop
001630   001304                  141     						bne DecLine
                                 142     
001632   005004                  143     						clr r4								; if(((r1-Output)/nCols) >= nRows) continue | checks if we didn't bypass nRows, therefore if the
                                 144     																	; index is still legal
001634   010105                  145     						mov r1, r5						; --""--
001636   162705 005064           146     						sub #Output, r5				; --""--
001642   005067 000134           147     						clr Temp							; --""--
001646   116767 003126 000126    148     						movb nCols, Temp			; --""--
001654   071467 000122           149     						div Temp, r4					; --""--
001660   005067 000116           150     						clr Temp							; --""--
001664   116767 003111 000110    151     						movb nRows, Temp			; --""--
001672   012767 000004 000106    152     						mov #4, RowLoop				; --""--
001700   020467 000076           153     						cmp r4, Temp					; --""--
001704   103656                  154     						blo DecLine						; --""--
                                 155     
                                 156     
001706   005067 000070           157     						clr Temp							; calculates nRows x nCols and stores it in r3
001712   116767 003062 000062    158     						movb nCols, Temp			; --""--
001720   016703 000056           159     						mov Temp, r3					; --""--
001724   005067 000052           160     						clr Temp							; --""--
001730   116767 003045 000044    161     						movb nRows, Temp			; --""--
001736   070367 000040           162     						mul Temp, r3					; --""--
                                 163     
001742   160301                  164     						sub r3, r1						; update r1 to the next block's column
001744   062701 000004           165     						add #4, r1						; --""--
                                 166     
001750   010104                  167     						mov r1, r4						; if (((r1-Output)>=nCols)) continue
001752   162704 005064           168     						sub #Output, r4				; --""--
001756   005067 000020           169     						clr Temp							; --""--
001762   116767 003012 000012    170     						movb nCols, Temp			; --""--
001770   020467 000006           171     						cmp r4, Temp					; --""--
001774   002622                  172     						blt DecLine						; --""--
                                 173     
001776   000000                  174     finish:	 		halt
002000                           175     .even
002000   000000                  176     InLineCyclic:		.word 	0
002002   000000                  177     Temp:						.word 	0
002004   000004                  178     InLineL:	 			.word		4
002006   000004                  179     RowLoop:				.word 	4
                                 180     
002010                           181     . = torg + 5000
005000      010                  182     nCols: 	.byte 10
005001      004                  183     nRows: 	.byte 4
005002      000                  184     Enc: 	.byte 0
005003      003    004    005    185     Img:	.byte 3, 4, 5, 6
            006                          
005007      012    007    010    186     		.byte 12, 7, 10 ,11
            011                          
005013      015    016    013    187     		.byte 15, 16, 13, 14
            014                          
005017      000    001    002    188     		.byte 0, 1, 2, 17
            017                          
005023      003    004    005    189     		.byte 3, 4, 5, 6
            006                          
005027      012    007    010    190     		.byte 12, 7, 10 ,11
            011                          
005033      015    016    013    191     		.byte 15, 16, 13, 14
            014                          
005037      000    001    002    192     		.byte 0, 1, 2, 17
            017                          
                                 193     
005043      002    003    004    194     Hash: 	.byte 2,3,4,5,6,7,10,11,12,13,14,15,16,17,0,1
            005    006    007            
            010    011    012            
            013    014    015            
            016    017    000            
            001                          
005063      000                  195     .even
005064   000000 000000 000000    196     Output: .blkw 20


	S Y M B O L   T A B L E
	=======================

SYMBOL    VALUE   TYPE
------    -----   ----
main      001000  text     
Img       005003  text     
Hash      005043  text     
Output    005064  text     
Temp      002002  text     
nCols     005000  text     
nRows     005001  text     
endp      001056  text     
dupLoop   001062  text     
finish    001776  text     
Enc       005002  text     
ENCRYPT   001106  text     
DECRYPT   001442  text     
EncLine   001106  text     
InLineL   002004  text     
RowLoop   002006  text     
InLineCy  002000  text     
EndDntCy  001240  text     
EncRepCy  001170  text     
EncCyclM  001212  text     
DecLine   001442  text     
DecByte   001450  text     
DecDntCy  001600  text     
DecRepCy  001530  text     
DecCyclM  001546  text     
